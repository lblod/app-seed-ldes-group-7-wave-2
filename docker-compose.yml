networks:
  seed:
    name: seed


services:

  # fake LDES server hosting the LDES files from 
  # https://github.com/lblod/Semantics-YourFingertips-hackathon-wave-2-IPDC-LEDS-dumps/tree/master
  ldes-server:
    image: nginx:${NGINX_TAG:-stable}
    ports:
      - 8080:8080
    volumes:
      - ./ldes-server/mimic-ldes-server.conf:/etc/nginx/conf.d/mimic-ldes-server.conf:ro
      - ./ldes-server/data:/www/data
    networks:
      - seed


  # LDIO workbench reading the LDES using a (dynamically submitted) pipeline
  ldio-workbench:
    image: ldes/ldi-orchestrator:${LDIO_TAG:-2.9.0-SNAPSHOT}
    depends_on:
      rdf-seeder:
        condition: service_healthy
    environment:
      - SERVER_PORT=80
      - MANAGEMENT_TRACING_ENABLED=false
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,prometheus
      - MANAGEMENT_ENDPOINT_HEALTH_SHOWDETAILS=always
    volumes:
      - ./workbench/application.yml:/ldio/application.yml:ro
    ports:
      - 8081:80
    networks:
      - seed
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://ldio-workbench/actuator/health"]
      interval: 3s
      timeout: 3s
      retries: 10


  # WORKAROUND because Ldio:RepoSink cannot POST to Virtuoso directly and workaround using RDFJ+Virtuoso
  # did not work either (Java exceptions)
  # This service accepts N-triples using HTTP and insert them into Virtuosp using the configured graph
  rdf-seeder:
    build:
      context: ./rdf-seeder
    depends_on:
      - virtuoso
    environment:
      - SPARQL_ENDPOINT=http://virtuoso:8890/sparql
      - DEFAULT_GRAPH=http://example.com # TODO: fix this
    expose:
      - 80
    networks:
      - seed
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://rdf-seeder/prometheus"]
      interval: 1s
      timeout: 1s
      retries: 10


  # Graph database storing the (IPDC) linked data
  virtuoso:
    image: redpencil/virtuoso:${VIRTUOSO_TAG:-1.2.0-rc.1}
    environment:
      - SPARQL_UPDATE=true
    ports:
      - 8890:8890
    networks:
      - seed


  # Optional component to allow monitoring the progress
  prometheus:
    image: prom/prometheus:${PROMETHEUS_TAG:-latest}
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    expose:
      - 9090
    networks:
      - seed


  # Optional component for monitoring the progress
  grafana:
    image: grafana/grafana:${GRAFANA_TAG:-main}
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PWD}
    ports:
      - 3000:3000
    networks:
      - seed
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://grafana:3000/api/health"]
      interval: 12s
      timeout: 3s
      retries: 20
